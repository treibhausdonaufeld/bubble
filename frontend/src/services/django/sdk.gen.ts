// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AuthorsCreateData, AuthorsCreateResponses, AuthorsDestroyData, AuthorsDestroyResponses, AuthorsListData, AuthorsListResponses, AuthorsPartialUpdateData, AuthorsPartialUpdateResponses, AuthorsRetrieveData, AuthorsRetrieveResponses, AuthorsUpdateData, AuthorsUpdateResponses, AuthTokenCreateData, AuthTokenCreateResponses, BookingsCreateData, BookingsCreateResponses, BookingsDestroyData, BookingsDestroyResponses, BookingsListData, BookingsListResponses, BookingsPartialUpdateData, BookingsPartialUpdateResponses, BookingsRetrieveData, BookingsRetrieveResponses, BookingsUpdateData, BookingsUpdateResponses, BooksCreateData, BooksCreateResponses, BooksDestroyData, BooksDestroyResponses, BooksIsbnUpdateUpdateData, BooksIsbnUpdateUpdateResponses, BooksListData, BooksListResponses, BooksPartialUpdateData, BooksPartialUpdateResponses, BooksRetrieveData, BooksRetrieveResponses, BooksUpdateData, BooksUpdateResponses, GenresCreateData, GenresCreateResponses, GenresDestroyData, GenresDestroyResponses, GenresListData, GenresListResponses, GenresPartialUpdateData, GenresPartialUpdateResponses, GenresRetrieveData, GenresRetrieveResponses, GenresUpdateData, GenresUpdateResponses, ImagesCreateData, ImagesCreateResponses, ImagesDestroyData, ImagesDestroyResponses, ImagesListData, ImagesListResponses, ImagesPartialUpdateData, ImagesPartialUpdateResponses, ImagesRetrieveData, ImagesRetrieveResponses, ImagesUpdateData, ImagesUpdateResponses, ItemsAiDescribeUpdateData, ItemsAiDescribeUpdateResponses, ItemsAiImageUpdateData, ItemsAiImageUpdateResponses, ItemsCreateData, ItemsCreateResponses, ItemsDestroyData, ItemsDestroyResponses, ItemsListData, ItemsListResponses, ItemsPartialUpdateData, ItemsPartialUpdateResponses, ItemsReorderImagesUpdateData, ItemsReorderImagesUpdateResponses, ItemsRetrieveData, ItemsRetrieveResponses, ItemsUpdateData, ItemsUpdateResponses, MessagesCreateData, MessagesCreateResponses, MessagesDestroyData, MessagesDestroyResponses, MessagesListData, MessagesListResponses, MessagesPartialUpdateData, MessagesPartialUpdateResponses, MessagesRetrieveData, MessagesRetrieveResponses, MessagesUpdateData, MessagesUpdateResponses, ProfilesListData, ProfilesListResponses, ProfilesMePartialUpdateData, ProfilesMePartialUpdateResponses, ProfilesMeRetrieveData, ProfilesMeRetrieveResponses, ProfilesRetrieveData, ProfilesRetrieveResponses, PublicBookingsListData, PublicBookingsListResponses, PublicBookingsRetrieveData, PublicBookingsRetrieveResponses, PublicItemsListData, PublicItemsListResponses, PublicItemsRetrieveData, PublicItemsRetrieveResponses, PublishersCreateData, PublishersCreateResponses, PublishersDestroyData, PublishersDestroyResponses, PublishersListData, PublishersListResponses, PublishersPartialUpdateData, PublishersPartialUpdateResponses, PublishersRetrieveData, PublishersRetrieveResponses, PublishersUpdateData, PublishersUpdateResponses, SchemaRetrieveData, SchemaRetrieveResponses, ShelvesCreateData, ShelvesCreateResponses, ShelvesDestroyData, ShelvesDestroyResponses, ShelvesListData, ShelvesListResponses, ShelvesPartialUpdateData, ShelvesPartialUpdateResponses, ShelvesRetrieveData, ShelvesRetrieveResponses, ShelvesUpdateData, ShelvesUpdateResponses, UsersListData, UsersListResponses, UsersMeRetrieveData, UsersMeRetrieveResponses, UsersPartialUpdateData, UsersPartialUpdateResponses, UsersRetrieveData, UsersRetrieveResponses, UsersUpdateData, UsersUpdateResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const authTokenCreate = <ThrowOnError extends boolean = true>(options: Options<AuthTokenCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthTokenCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth-token/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing authors.
 *
 * list: Get all authors
 * retrieve: Get a specific author by UUID
 * create: Create a new author
 * update: Update an author
 * partial_update: Partially update an author
 * destroy: Delete an author
 */
export const authorsList = <ThrowOnError extends boolean = true>(options?: Options<AuthorsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<AuthorsListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/authors/',
        ...options
    });
};

/**
 * ViewSet for managing authors.
 *
 * list: Get all authors
 * retrieve: Get a specific author by UUID
 * create: Create a new author
 * update: Update an author
 * partial_update: Partially update an author
 * destroy: Delete an author
 */
export const authorsCreate = <ThrowOnError extends boolean = true>(options: Options<AuthorsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<AuthorsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/authors/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing authors.
 *
 * list: Get all authors
 * retrieve: Get a specific author by UUID
 * create: Create a new author
 * update: Update an author
 * partial_update: Partially update an author
 * destroy: Delete an author
 */
export const authorsDestroy = <ThrowOnError extends boolean = true>(options: Options<AuthorsDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<AuthorsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/authors/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing authors.
 *
 * list: Get all authors
 * retrieve: Get a specific author by UUID
 * create: Create a new author
 * update: Update an author
 * partial_update: Partially update an author
 * destroy: Delete an author
 */
export const authorsRetrieve = <ThrowOnError extends boolean = true>(options: Options<AuthorsRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<AuthorsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/authors/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing authors.
 *
 * list: Get all authors
 * retrieve: Get a specific author by UUID
 * create: Create a new author
 * update: Update an author
 * partial_update: Partially update an author
 * destroy: Delete an author
 */
export const authorsPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<AuthorsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<AuthorsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/authors/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing authors.
 *
 * list: Get all authors
 * retrieve: Get a specific author by UUID
 * create: Create a new author
 * update: Update an author
 * partial_update: Partially update an author
 * destroy: Delete an author
 */
export const authorsUpdate = <ThrowOnError extends boolean = true>(options: Options<AuthorsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<AuthorsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/authors/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for bookings with filtering and permissions.
 */
export const bookingsList = <ThrowOnError extends boolean = true>(options?: Options<BookingsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<BookingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/bookings/',
        ...options
    });
};

/**
 * ViewSet for bookings with filtering and permissions.
 */
export const bookingsCreate = <ThrowOnError extends boolean = true>(options: Options<BookingsCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<BookingsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/bookings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for bookings with filtering and permissions.
 */
export const bookingsDestroy = <ThrowOnError extends boolean = true>(options: Options<BookingsDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<BookingsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/bookings/{id}/',
        ...options
    });
};

/**
 * ViewSet for bookings with filtering and permissions.
 */
export const bookingsRetrieve = <ThrowOnError extends boolean = true>(options: Options<BookingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<BookingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/bookings/{id}/',
        ...options
    });
};

/**
 * ViewSet for bookings with filtering and permissions.
 */
export const bookingsPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<BookingsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<BookingsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/bookings/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for bookings with filtering and permissions.
 */
export const bookingsUpdate = <ThrowOnError extends boolean = true>(options: Options<BookingsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<BookingsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/bookings/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing books.
 *
 * Dynamically includes both Book instances and Items with category='books'.
 * When an Item with category='books' is accessed, it's automatically promoted
 * to a Book instance via signals.
 *
 * list: Get all books
 * retrieve: Get a specific book by UUID
 * create: Create a new book
 * update: Update a book
 * partial_update: Partially update a book
 * destroy: Delete a book
 */
export const booksList = <ThrowOnError extends boolean = true>(options?: Options<BooksListData, ThrowOnError>) => {
    return (options?.client ?? client).get<BooksListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/books/',
        ...options
    });
};

/**
 * ViewSet for managing books.
 *
 * Dynamically includes both Book instances and Items with category='books'.
 * When an Item with category='books' is accessed, it's automatically promoted
 * to a Book instance via signals.
 *
 * list: Get all books
 * retrieve: Get a specific book by UUID
 * create: Create a new book
 * update: Update a book
 * partial_update: Partially update a book
 * destroy: Delete a book
 */
export const booksCreate = <ThrowOnError extends boolean = true>(options?: Options<BooksCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<BooksCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/books/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * ViewSet for managing books.
 *
 * Dynamically includes both Book instances and Items with category='books'.
 * When an Item with category='books' is accessed, it's automatically promoted
 * to a Book instance via signals.
 *
 * list: Get all books
 * retrieve: Get a specific book by UUID
 * create: Create a new book
 * update: Update a book
 * partial_update: Partially update a book
 * destroy: Delete a book
 */
export const booksDestroy = <ThrowOnError extends boolean = true>(options: Options<BooksDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<BooksDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/books/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing books.
 *
 * Dynamically includes both Book instances and Items with category='books'.
 * When an Item with category='books' is accessed, it's automatically promoted
 * to a Book instance via signals.
 *
 * list: Get all books
 * retrieve: Get a specific book by UUID
 * create: Create a new book
 * update: Update a book
 * partial_update: Partially update a book
 * destroy: Delete a book
 */
export const booksRetrieve = <ThrowOnError extends boolean = true>(options: Options<BooksRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<BooksRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/books/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing books.
 *
 * Dynamically includes both Book instances and Items with category='books'.
 * When an Item with category='books' is accessed, it's automatically promoted
 * to a Book instance via signals.
 *
 * list: Get all books
 * retrieve: Get a specific book by UUID
 * create: Create a new book
 * update: Update a book
 * partial_update: Partially update a book
 * destroy: Delete a book
 */
export const booksPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<BooksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<BooksPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/books/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing books.
 *
 * Dynamically includes both Book instances and Items with category='books'.
 * When an Item with category='books' is accessed, it's automatically promoted
 * to a Book instance via signals.
 *
 * list: Get all books
 * retrieve: Get a specific book by UUID
 * create: Create a new book
 * update: Update a book
 * partial_update: Partially update a book
 * destroy: Delete a book
 */
export const booksUpdate = <ThrowOnError extends boolean = true>(options: Options<BooksUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<BooksUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/books/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update book details from OpenLibrary based on ISBN.
 *
 * Optionally provide an ISBN in the request body to update the book with data
 * from OpenLibrary. If no ISBN is provided, the book's existing ISBN will be used.
 */
export const booksIsbnUpdateUpdate = <ThrowOnError extends boolean = true>(options: Options<BooksIsbnUpdateUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<BooksIsbnUpdateUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/books/{id}/isbn_update/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing genres.
 *
 * list: Get all genres
 * retrieve: Get a specific genre by UUID
 * create: Create a new genre
 * update: Update a genre
 * partial_update: Partially update a genre
 * destroy: Delete a genre
 */
export const genresList = <ThrowOnError extends boolean = true>(options?: Options<GenresListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GenresListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/genres/',
        ...options
    });
};

/**
 * ViewSet for managing genres.
 *
 * list: Get all genres
 * retrieve: Get a specific genre by UUID
 * create: Create a new genre
 * update: Update a genre
 * partial_update: Partially update a genre
 * destroy: Delete a genre
 */
export const genresCreate = <ThrowOnError extends boolean = true>(options: Options<GenresCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<GenresCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/genres/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing genres.
 *
 * list: Get all genres
 * retrieve: Get a specific genre by UUID
 * create: Create a new genre
 * update: Update a genre
 * partial_update: Partially update a genre
 * destroy: Delete a genre
 */
export const genresDestroy = <ThrowOnError extends boolean = true>(options: Options<GenresDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<GenresDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/genres/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing genres.
 *
 * list: Get all genres
 * retrieve: Get a specific genre by UUID
 * create: Create a new genre
 * update: Update a genre
 * partial_update: Partially update a genre
 * destroy: Delete a genre
 */
export const genresRetrieve = <ThrowOnError extends boolean = true>(options: Options<GenresRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<GenresRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/genres/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing genres.
 *
 * list: Get all genres
 * retrieve: Get a specific genre by UUID
 * create: Create a new genre
 * update: Update a genre
 * partial_update: Partially update a genre
 * destroy: Delete a genre
 */
export const genresPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<GenresPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<GenresPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/genres/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing genres.
 *
 * list: Get all genres
 * retrieve: Get a specific genre by UUID
 * create: Create a new genre
 * update: Update a genre
 * partial_update: Partially update a genre
 * destroy: Delete a genre
 */
export const genresUpdate = <ThrowOnError extends boolean = true>(options: Options<GenresUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<GenresUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/genres/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for retrieving images.
 * Only authenticated users can access images.
 * Users can only see images of items they have access to.
 */
export const imagesList = <ThrowOnError extends boolean = true>(options?: Options<ImagesListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ImagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/images/',
        ...options
    });
};

/**
 * ViewSet for retrieving images.
 * Only authenticated users can access images.
 * Users can only see images of items they have access to.
 */
export const imagesCreate = <ThrowOnError extends boolean = true>(options: Options<ImagesCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ImagesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/images/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for retrieving images.
 * Only authenticated users can access images.
 * Users can only see images of items they have access to.
 */
export const imagesDestroy = <ThrowOnError extends boolean = true>(options: Options<ImagesDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<ImagesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/images/{id}/',
        ...options
    });
};

/**
 * ViewSet for retrieving images.
 * Only authenticated users can access images.
 * Users can only see images of items they have access to.
 */
export const imagesRetrieve = <ThrowOnError extends boolean = true>(options: Options<ImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<ImagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/images/{id}/',
        ...options
    });
};

/**
 * ViewSet for retrieving images.
 * Only authenticated users can access images.
 * Users can only see images of items they have access to.
 */
export const imagesPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<ImagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ImagesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/images/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for retrieving images.
 * Only authenticated users can access images.
 * Users can only see images of items they have access to.
 */
export const imagesUpdate = <ThrowOnError extends boolean = true>(options: Options<ImagesUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ImagesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/images/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for retrieving, creating, updating, and deleting items.
 */
export const itemsList = <ThrowOnError extends boolean = true>(options?: Options<ItemsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/',
        ...options
    });
};

/**
 * ViewSet for retrieving, creating, updating, and deleting items.
 */
export const itemsCreate = <ThrowOnError extends boolean = true>(options?: Options<ItemsCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<ItemsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * ViewSet for retrieving, creating, updating, and deleting items.
 */
export const itemsDestroy = <ThrowOnError extends boolean = true>(options: Options<ItemsDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<ItemsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/{id}/',
        ...options
    });
};

/**
 * ViewSet for retrieving, creating, updating, and deleting items.
 */
export const itemsRetrieve = <ThrowOnError extends boolean = true>(options: Options<ItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<ItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/{id}/',
        ...options
    });
};

/**
 * ViewSet for retrieving, creating, updating, and deleting items.
 */
export const itemsPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<ItemsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ItemsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for retrieving, creating, updating, and deleting items.
 */
export const itemsUpdate = <ThrowOnError extends boolean = true>(options: Options<ItemsUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ItemsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Ai describe the item and populate fields.
 */
export const itemsAiDescribeUpdate = <ThrowOnError extends boolean = true>(options: Options<ItemsAiDescribeUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ItemsAiDescribeUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/{id}/ai_describe/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate an image from the item's name and description and attach it.
 *
 * The generated image is created by a small Google image model and saved
 * as a new Image.original file for the item. Returns the created image
 * data via ImageSerializer.
 */
export const itemsAiImageUpdate = <ThrowOnError extends boolean = true>(options: Options<ItemsAiImageUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ItemsAiImageUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/{id}/ai_image/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reorder images for an item.
 */
export const itemsReorderImagesUpdate = <ThrowOnError extends boolean = true>(options: Options<ItemsReorderImagesUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ItemsReorderImagesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/items/{id}/reorder_images/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for messages related to bookings.
 *
 * List requires either `booking` (booking-uuid) or `user` (user id) query param
 * to be provided to avoid returning global message lists.
 */
export const messagesList = <ThrowOnError extends boolean = true>(options?: Options<MessagesListData, ThrowOnError>) => {
    return (options?.client ?? client).get<MessagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/messages/',
        ...options
    });
};

/**
 * ViewSet for messages related to bookings.
 *
 * List requires either `booking` (booking-uuid) or `user` (user id) query param
 * to be provided to avoid returning global message lists.
 */
export const messagesCreate = <ThrowOnError extends boolean = true>(options: Options<MessagesCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<MessagesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for messages related to bookings.
 *
 * List requires either `booking` (booking-uuid) or `user` (user id) query param
 * to be provided to avoid returning global message lists.
 */
export const messagesDestroy = <ThrowOnError extends boolean = true>(options: Options<MessagesDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<MessagesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/messages/{id}/',
        ...options
    });
};

/**
 * ViewSet for messages related to bookings.
 *
 * List requires either `booking` (booking-uuid) or `user` (user id) query param
 * to be provided to avoid returning global message lists.
 */
export const messagesRetrieve = <ThrowOnError extends boolean = true>(options: Options<MessagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<MessagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/messages/{id}/',
        ...options
    });
};

/**
 * ViewSet for messages related to bookings.
 *
 * List requires either `booking` (booking-uuid) or `user` (user id) query param
 * to be provided to avoid returning global message lists.
 */
export const messagesPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<MessagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<MessagesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/messages/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for messages related to bookings.
 *
 * List requires either `booking` (booking-uuid) or `user` (user id) query param
 * to be provided to avoid returning global message lists.
 */
export const messagesUpdate = <ThrowOnError extends boolean = true>(options: Options<MessagesUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<MessagesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/messages/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for retrieving user profiles.
 * Read-only access to profile information.
 */
export const profilesList = <ThrowOnError extends boolean = true>(options?: Options<ProfilesListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProfilesListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/profiles/',
        ...options
    });
};

/**
 * ViewSet for retrieving user profiles.
 * Read-only access to profile information.
 */
export const profilesRetrieve = <ThrowOnError extends boolean = true>(options: Options<ProfilesRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<ProfilesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/profiles/{id}/',
        ...options
    });
};

/**
 * Get the current user's profile.
 */
export const profilesMeRetrieve = <ThrowOnError extends boolean = true>(options?: Options<ProfilesMeRetrieveData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProfilesMeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/profiles/me/',
        ...options
    });
};

/**
 * Get the current user's profile.
 */
export const profilesMePartialUpdate = <ThrowOnError extends boolean = true>(options?: Options<ProfilesMePartialUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<ProfilesMePartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/profiles/me/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Public read-only ViewSet for confirmed bookings.
 *
 * This viewset only returns bookings with CONFIRMED status and is read-only.
 * Supports filtering via BookingFilter.
 */
export const publicBookingsList = <ThrowOnError extends boolean = true>(options?: Options<PublicBookingsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<PublicBookingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/public-bookings/',
        ...options
    });
};

/**
 * Public read-only ViewSet for confirmed bookings.
 *
 * This viewset only returns bookings with CONFIRMED status and is read-only.
 * Supports filtering via BookingFilter.
 */
export const publicBookingsRetrieve = <ThrowOnError extends boolean = true>(options: Options<PublicBookingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<PublicBookingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/public-bookings/{id}/',
        ...options
    });
};

/**
 * ViewSet for retrieving published items.
 * This viewset is read-only and only returns items with a published status.
 */
export const publicItemsList = <ThrowOnError extends boolean = true>(options?: Options<PublicItemsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<PublicItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/public-items/',
        ...options
    });
};

/**
 * ViewSet for retrieving published items.
 * This viewset is read-only and only returns items with a published status.
 */
export const publicItemsRetrieve = <ThrowOnError extends boolean = true>(options: Options<PublicItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<PublicItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/public-items/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing publishers.
 *
 * list: Get all publishers
 * retrieve: Get a specific publisher by UUID
 * create: Create a new publisher
 * update: Update a publisher
 * partial_update: Partially update a publisher
 * destroy: Delete a publisher
 */
export const publishersList = <ThrowOnError extends boolean = true>(options?: Options<PublishersListData, ThrowOnError>) => {
    return (options?.client ?? client).get<PublishersListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/publishers/',
        ...options
    });
};

/**
 * ViewSet for managing publishers.
 *
 * list: Get all publishers
 * retrieve: Get a specific publisher by UUID
 * create: Create a new publisher
 * update: Update a publisher
 * partial_update: Partially update a publisher
 * destroy: Delete a publisher
 */
export const publishersCreate = <ThrowOnError extends boolean = true>(options: Options<PublishersCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<PublishersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/publishers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing publishers.
 *
 * list: Get all publishers
 * retrieve: Get a specific publisher by UUID
 * create: Create a new publisher
 * update: Update a publisher
 * partial_update: Partially update a publisher
 * destroy: Delete a publisher
 */
export const publishersDestroy = <ThrowOnError extends boolean = true>(options: Options<PublishersDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<PublishersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/publishers/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing publishers.
 *
 * list: Get all publishers
 * retrieve: Get a specific publisher by UUID
 * create: Create a new publisher
 * update: Update a publisher
 * partial_update: Partially update a publisher
 * destroy: Delete a publisher
 */
export const publishersRetrieve = <ThrowOnError extends boolean = true>(options: Options<PublishersRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<PublishersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/publishers/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing publishers.
 *
 * list: Get all publishers
 * retrieve: Get a specific publisher by UUID
 * create: Create a new publisher
 * update: Update a publisher
 * partial_update: Partially update a publisher
 * destroy: Delete a publisher
 */
export const publishersPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<PublishersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<PublishersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/publishers/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing publishers.
 *
 * list: Get all publishers
 * retrieve: Get a specific publisher by UUID
 * create: Create a new publisher
 * update: Update a publisher
 * partial_update: Partially update a publisher
 * destroy: Delete a publisher
 */
export const publishersUpdate = <ThrowOnError extends boolean = true>(options: Options<PublishersUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<PublishersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/publishers/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const schemaRetrieve = <ThrowOnError extends boolean = true>(options?: Options<SchemaRetrieveData, ThrowOnError>) => {
    return (options?.client ?? client).get<SchemaRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/schema/',
        ...options
    });
};

/**
 * ViewSet for managing shelves.
 *
 * list: Get all shelves
 * retrieve: Get a specific shelf by UUID
 * create: Create a new shelf
 * update: Update a shelf
 * partial_update: Partially update a shelf
 * destroy: Delete a shelf
 */
export const shelvesList = <ThrowOnError extends boolean = true>(options?: Options<ShelvesListData, ThrowOnError>) => {
    return (options?.client ?? client).get<ShelvesListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/shelves/',
        ...options
    });
};

/**
 * ViewSet for managing shelves.
 *
 * list: Get all shelves
 * retrieve: Get a specific shelf by UUID
 * create: Create a new shelf
 * update: Update a shelf
 * partial_update: Partially update a shelf
 * destroy: Delete a shelf
 */
export const shelvesCreate = <ThrowOnError extends boolean = true>(options: Options<ShelvesCreateData, ThrowOnError>) => {
    return (options.client ?? client).post<ShelvesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/shelves/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing shelves.
 *
 * list: Get all shelves
 * retrieve: Get a specific shelf by UUID
 * create: Create a new shelf
 * update: Update a shelf
 * partial_update: Partially update a shelf
 * destroy: Delete a shelf
 */
export const shelvesDestroy = <ThrowOnError extends boolean = true>(options: Options<ShelvesDestroyData, ThrowOnError>) => {
    return (options.client ?? client).delete<ShelvesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/shelves/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing shelves.
 *
 * list: Get all shelves
 * retrieve: Get a specific shelf by UUID
 * create: Create a new shelf
 * update: Update a shelf
 * partial_update: Partially update a shelf
 * destroy: Delete a shelf
 */
export const shelvesRetrieve = <ThrowOnError extends boolean = true>(options: Options<ShelvesRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<ShelvesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/shelves/{id}/',
        ...options
    });
};

/**
 * ViewSet for managing shelves.
 *
 * list: Get all shelves
 * retrieve: Get a specific shelf by UUID
 * create: Create a new shelf
 * update: Update a shelf
 * partial_update: Partially update a shelf
 * destroy: Delete a shelf
 */
export const shelvesPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<ShelvesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<ShelvesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/shelves/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ViewSet for managing shelves.
 *
 * list: Get all shelves
 * retrieve: Get a specific shelf by UUID
 * create: Create a new shelf
 * update: Update a shelf
 * partial_update: Partially update a shelf
 * destroy: Delete a shelf
 */
export const shelvesUpdate = <ThrowOnError extends boolean = true>(options: Options<ShelvesUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<ShelvesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/shelves/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersList = <ThrowOnError extends boolean = true>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

export const usersRetrieve = <ThrowOnError extends boolean = true>(options: Options<UsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? client).get<UsersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options
    });
};

export const usersPartialUpdate = <ThrowOnError extends boolean = true>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? client).patch<UsersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersUpdate = <ThrowOnError extends boolean = true>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? client).put<UsersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersMeRetrieve = <ThrowOnError extends boolean = true>(options?: Options<UsersMeRetrieveData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersMeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/me/',
        ...options
    });
};
