// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:9000' | (string & {});
};

export type AuthToken = {
    username: string;
    password: string;
    readonly token: string;
};

export type BlankEnum = '';

/**
 * Detailed serializer for Booking where `item` is represented only by UUID.
 */
export type Booking = {
    readonly uuid: string;
    status?: StatusE2dEnum;
    /**
     * Unique identifier for the item
     */
    item: string;
    item_details: ItemMinimal;
    user: User;
    time_from?: string | null;
    time_to?: string | null;
    /**
     * Offered price for the booking
     */
    offer?: string | null;
    /**
     * Counter offer price for the booking
     */
    counter_offer?: string | null;
    accepted_by?: number | null;
    readonly created_at: string;
    readonly updated_at: string;
    /**
     * Return unread_messages_count if it exists as an annotated field.
     */
    readonly unread_messages_count: number | null;
};

/**
 * Detailed serializer for Booking where `item` is represented only by UUID.
 */
export type BookingList = {
    readonly uuid: string;
    status?: StatusE2dEnum;
    /**
     * Unique identifier for the item
     */
    readonly item: string;
    item_details: ItemMinimal;
    user: User;
    readonly created_at: string;
    time_from?: string | null;
    time_to?: string | null;
    /**
     * Return unread_messages_count if it exists as an annotated field.
     */
    readonly unread_messages_count: number | null;
};

/**
 * * `books` - Books
 * * `clothing` - Clothing
 * * `electronics` - Electronics
 * * `furniture` - Furniture
 * * `garden` - Garden
 * * `kitchen` - Kitchen
 * * `other` - Other
 * * `rooms` - Rooms
 * * `sports` - Sports
 * * `tools` - Tools
 * * `toys` - Toys
 * * `vehicles` - Vehicles
 */
export type CategoryEnum = 'books' | 'clothing' | 'electronics' | 'furniture' | 'garden' | 'kitchen' | 'other' | 'rooms' | 'sports' | 'tools' | 'toys' | 'vehicles';

/**
 * * `0` - New
 * * `1` - Used
 * * `2` - Broken
 */
export type ConditionEnum = 0 | 1 | 2;

/**
 * Serializer for Image model.
 */
export type Image = {
    readonly uuid: string;
    original: string;
    ordering?: number | null;
    readonly thumbnail: string;
    readonly preview: string;
    /**
     * Unique identifier for the item
     */
    item: string;
};

/**
 * Serializer for Item model.
 */
export type Item = {
    readonly images: Array<Image>;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    readonly username: string;
    readonly first_image: string;
    sale_price?: string | null;
    rental_price?: string | null;
    /**
     * Category of the item
     *
     * * `books` - Books
     * * `clothing` - Clothing
     * * `electronics` - Electronics
     * * `furniture` - Furniture
     * * `garden` - Garden
     * * `kitchen` - Kitchen
     * * `other` - Other
     * * `rooms` - Rooms
     * * `sports` - Sports
     * * `tools` - Tools
     * * `toys` - Toys
     * * `vehicles` - Vehicles
     */
    category?: CategoryEnum | BlankEnum;
    /**
     * Unique identifier for the item
     */
    readonly uuid: string;
    name?: string;
    slug?: string;
    description?: string;
    /**
     * Internal item, not for public display
     */
    internal?: boolean;
    /**
     * Display your contact information public
     */
    display_contact?: boolean;
    readonly sale_price_currency: string | null;
    readonly rental_price_currency: string | null;
    rental_period?: RentalPeriodEnum | BlankEnum;
    /**
     * Allow self-service rental without owner approval
     */
    rental_self_service?: boolean;
    /**
     * Allow open-ended rentals without a return date
     */
    rental_open_end?: boolean;
    /**
     * Enable payment via internal payment system
     */
    payment_enabled?: boolean;
    readonly created_at: string;
    readonly updated_at: string;
    /**
     * Condition of the item
     *
     * * `0` - New
     * * `1` - Used
     * * `2` - Broken
     */
    condition?: ConditionEnum;
    active?: boolean;
    status?: Status402Enum;
    readonly user: number;
};

/**
 * Lightweight serializer for item lists.
 */
export type ItemList = {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    readonly username: string;
    readonly first_image: string;
    sale_price?: string | null;
    rental_price?: string | null;
    /**
     * Category of the item
     *
     * * `books` - Books
     * * `clothing` - Clothing
     * * `electronics` - Electronics
     * * `furniture` - Furniture
     * * `garden` - Garden
     * * `kitchen` - Kitchen
     * * `other` - Other
     * * `rooms` - Rooms
     * * `sports` - Sports
     * * `tools` - Tools
     * * `toys` - Toys
     * * `vehicles` - Vehicles
     */
    category?: CategoryEnum | BlankEnum;
    /**
     * Unique identifier for the item
     */
    readonly uuid: string;
    name?: string;
    slug?: string;
    description?: string;
    /**
     * Internal item, not for public display
     */
    internal?: boolean;
    /**
     * Display your contact information public
     */
    display_contact?: boolean;
    readonly sale_price_currency: string | null;
    readonly rental_price_currency: string | null;
    rental_period?: RentalPeriodEnum | BlankEnum;
    /**
     * Allow self-service rental without owner approval
     */
    rental_self_service?: boolean;
    /**
     * Allow open-ended rentals without a return date
     */
    rental_open_end?: boolean;
    /**
     * Enable payment via internal payment system
     */
    payment_enabled?: boolean;
    readonly created_at: string;
    readonly updated_at: string;
    /**
     * Condition of the item
     *
     * * `0` - New
     * * `1` - Used
     * * `2` - Broken
     */
    condition?: ConditionEnum;
    active?: boolean;
    status?: Status402Enum;
    readonly user: number;
};

/**
 * Lightweight serializer for item lists.
 */
export type ItemMinimal = {
    /**
     * Unique identifier for the item
     */
    readonly uuid: string;
    name?: string;
    readonly first_image: string;
};

/**
 * Serializer for Message model. Booking is referenced by UUID.
 */
export type Message = {
    readonly uuid: string;
    booking: string;
    readonly sender: string;
    readonly created_at: string;
    message: string;
    is_read?: boolean;
};

export type PaginatedBookingListList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<BookingList>;
};

export type PaginatedImageList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Image>;
};

export type PaginatedItemListList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<ItemList>;
};

export type PaginatedMessageList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Message>;
};

export type PaginatedProfileList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Profile>;
};

export type PaginatedUserList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<User>;
};

/**
 * Detailed serializer for Booking where `item` is represented only by UUID.
 */
export type PatchedBooking = {
    readonly uuid?: string;
    status?: StatusE2dEnum;
    /**
     * Unique identifier for the item
     */
    item?: string;
    item_details?: ItemMinimal;
    user?: User;
    time_from?: string | null;
    time_to?: string | null;
    /**
     * Offered price for the booking
     */
    offer?: string | null;
    /**
     * Counter offer price for the booking
     */
    counter_offer?: string | null;
    accepted_by?: number | null;
    readonly created_at?: string;
    readonly updated_at?: string;
    /**
     * Return unread_messages_count if it exists as an annotated field.
     */
    readonly unread_messages_count?: number | null;
};

/**
 * Serializer for Image model.
 */
export type PatchedImage = {
    readonly uuid?: string;
    original?: string;
    ordering?: number | null;
    readonly thumbnail?: string;
    readonly preview?: string;
    /**
     * Unique identifier for the item
     */
    item?: string;
};

/**
 * Serializer for Item model.
 */
export type PatchedItem = {
    readonly images?: Array<Image>;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    readonly username?: string;
    readonly first_image?: string;
    sale_price?: string | null;
    rental_price?: string | null;
    /**
     * Category of the item
     *
     * * `books` - Books
     * * `clothing` - Clothing
     * * `electronics` - Electronics
     * * `furniture` - Furniture
     * * `garden` - Garden
     * * `kitchen` - Kitchen
     * * `other` - Other
     * * `rooms` - Rooms
     * * `sports` - Sports
     * * `tools` - Tools
     * * `toys` - Toys
     * * `vehicles` - Vehicles
     */
    category?: CategoryEnum | BlankEnum;
    /**
     * Unique identifier for the item
     */
    readonly uuid?: string;
    name?: string;
    slug?: string;
    description?: string;
    /**
     * Internal item, not for public display
     */
    internal?: boolean;
    /**
     * Display your contact information public
     */
    display_contact?: boolean;
    readonly sale_price_currency?: string | null;
    readonly rental_price_currency?: string | null;
    rental_period?: RentalPeriodEnum | BlankEnum;
    /**
     * Allow self-service rental without owner approval
     */
    rental_self_service?: boolean;
    /**
     * Allow open-ended rentals without a return date
     */
    rental_open_end?: boolean;
    /**
     * Enable payment via internal payment system
     */
    payment_enabled?: boolean;
    readonly created_at?: string;
    readonly updated_at?: string;
    /**
     * Condition of the item
     *
     * * `0` - New
     * * `1` - Used
     * * `2` - Broken
     */
    condition?: ConditionEnum;
    active?: boolean;
    status?: Status402Enum;
    readonly user?: number;
};

/**
 * Serializer for Message model. Booking is referenced by UUID.
 */
export type PatchedMessage = {
    readonly uuid?: string;
    booking?: string;
    readonly sender?: string;
    readonly created_at?: string;
    message?: string;
    is_read?: boolean;
};

export type PatchedProfile = {
    readonly username?: string;
    readonly name?: string;
    readonly email?: string;
    phone?: string;
    bio?: string;
    profile_image?: string | null;
};

export type PatchedUser = {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username?: string;
    /**
     * Name of User
     */
    name?: string;
    /**
     * Email address
     */
    email?: string;
};

export type Profile = {
    readonly username: string;
    readonly name: string;
    readonly email: string;
    phone?: string;
    bio?: string;
    profile_image?: string | null;
};

/**
 * * `h` - Hourly
 * * `d` - Daily
 * * `w` - Weekly
 */
export type RentalPeriodEnum = 'h' | 'd' | 'w';

/**
 * * `0` - Draft
 * * `1` - Processing
 * * `2` - Available
 * * `3` - Reserved
 * * `4` - Rented
 * * `5` - Sold
 */
export type Status402Enum = 0 | 1 | 2 | 3 | 4 | 5;

/**
 * * `1` - Pending
 * * `2` - Cancelled
 * * `3` - Confirmed
 * * `4` - Completed
 * * `5` - Rejected
 */
export type StatusE2dEnum = 1 | 2 | 3 | 4 | 5;

export type User = {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    username: string;
    /**
     * Name of User
     */
    name?: string;
    /**
     * Email address
     */
    email?: string;
};

/**
 * Detailed serializer for Booking where `item` is represented only by UUID.
 */
export type BookingWritable = {
    status?: StatusE2dEnum;
    /**
     * Unique identifier for the item
     */
    item: string;
    time_from?: string | null;
    time_to?: string | null;
    /**
     * Offered price for the booking
     */
    offer?: string | null;
    /**
     * Counter offer price for the booking
     */
    counter_offer?: string | null;
    accepted_by?: number | null;
};

/**
 * Detailed serializer for Booking where `item` is represented only by UUID.
 */
export type BookingListWritable = {
    status?: StatusE2dEnum;
    time_from?: string | null;
    time_to?: string | null;
};

/**
 * Serializer for Image model.
 */
export type ImageWritable = {
    original: string;
    ordering?: number | null;
    /**
     * Unique identifier for the item
     */
    item: string;
};

/**
 * Serializer for Item model.
 */
export type ItemWritable = {
    sale_price?: string | null;
    rental_price?: string | null;
    /**
     * Category of the item
     *
     * * `books` - Books
     * * `clothing` - Clothing
     * * `electronics` - Electronics
     * * `furniture` - Furniture
     * * `garden` - Garden
     * * `kitchen` - Kitchen
     * * `other` - Other
     * * `rooms` - Rooms
     * * `sports` - Sports
     * * `tools` - Tools
     * * `toys` - Toys
     * * `vehicles` - Vehicles
     */
    category?: CategoryEnum | BlankEnum;
    name?: string;
    slug?: string;
    description?: string;
    /**
     * Internal item, not for public display
     */
    internal?: boolean;
    /**
     * Display your contact information public
     */
    display_contact?: boolean;
    rental_period?: RentalPeriodEnum | BlankEnum;
    /**
     * Allow self-service rental without owner approval
     */
    rental_self_service?: boolean;
    /**
     * Allow open-ended rentals without a return date
     */
    rental_open_end?: boolean;
    /**
     * Enable payment via internal payment system
     */
    payment_enabled?: boolean;
    /**
     * Condition of the item
     *
     * * `0` - New
     * * `1` - Used
     * * `2` - Broken
     */
    condition?: ConditionEnum;
    active?: boolean;
    status?: Status402Enum;
};

/**
 * Lightweight serializer for item lists.
 */
export type ItemListWritable = {
    sale_price?: string | null;
    rental_price?: string | null;
    /**
     * Category of the item
     *
     * * `books` - Books
     * * `clothing` - Clothing
     * * `electronics` - Electronics
     * * `furniture` - Furniture
     * * `garden` - Garden
     * * `kitchen` - Kitchen
     * * `other` - Other
     * * `rooms` - Rooms
     * * `sports` - Sports
     * * `tools` - Tools
     * * `toys` - Toys
     * * `vehicles` - Vehicles
     */
    category?: CategoryEnum | BlankEnum;
    name?: string;
    slug?: string;
    description?: string;
    /**
     * Internal item, not for public display
     */
    internal?: boolean;
    /**
     * Display your contact information public
     */
    display_contact?: boolean;
    rental_period?: RentalPeriodEnum | BlankEnum;
    /**
     * Allow self-service rental without owner approval
     */
    rental_self_service?: boolean;
    /**
     * Allow open-ended rentals without a return date
     */
    rental_open_end?: boolean;
    /**
     * Enable payment via internal payment system
     */
    payment_enabled?: boolean;
    /**
     * Condition of the item
     *
     * * `0` - New
     * * `1` - Used
     * * `2` - Broken
     */
    condition?: ConditionEnum;
    active?: boolean;
    status?: Status402Enum;
};

/**
 * Lightweight serializer for item lists.
 */
export type ItemMinimalWritable = {
    name?: string;
};

/**
 * Serializer for Message model. Booking is referenced by UUID.
 */
export type MessageWritable = {
    booking: string;
    message: string;
    is_read?: boolean;
};

/**
 * Detailed serializer for Booking where `item` is represented only by UUID.
 */
export type PatchedBookingWritable = {
    status?: StatusE2dEnum;
    /**
     * Unique identifier for the item
     */
    item?: string;
    time_from?: string | null;
    time_to?: string | null;
    /**
     * Offered price for the booking
     */
    offer?: string | null;
    /**
     * Counter offer price for the booking
     */
    counter_offer?: string | null;
    accepted_by?: number | null;
};

/**
 * Serializer for Image model.
 */
export type PatchedImageWritable = {
    original?: string;
    ordering?: number | null;
    /**
     * Unique identifier for the item
     */
    item?: string;
};

/**
 * Serializer for Item model.
 */
export type PatchedItemWritable = {
    sale_price?: string | null;
    rental_price?: string | null;
    /**
     * Category of the item
     *
     * * `books` - Books
     * * `clothing` - Clothing
     * * `electronics` - Electronics
     * * `furniture` - Furniture
     * * `garden` - Garden
     * * `kitchen` - Kitchen
     * * `other` - Other
     * * `rooms` - Rooms
     * * `sports` - Sports
     * * `tools` - Tools
     * * `toys` - Toys
     * * `vehicles` - Vehicles
     */
    category?: CategoryEnum | BlankEnum;
    name?: string;
    slug?: string;
    description?: string;
    /**
     * Internal item, not for public display
     */
    internal?: boolean;
    /**
     * Display your contact information public
     */
    display_contact?: boolean;
    rental_period?: RentalPeriodEnum | BlankEnum;
    /**
     * Allow self-service rental without owner approval
     */
    rental_self_service?: boolean;
    /**
     * Allow open-ended rentals without a return date
     */
    rental_open_end?: boolean;
    /**
     * Enable payment via internal payment system
     */
    payment_enabled?: boolean;
    /**
     * Condition of the item
     *
     * * `0` - New
     * * `1` - Used
     * * `2` - Broken
     */
    condition?: ConditionEnum;
    active?: boolean;
    status?: Status402Enum;
};

/**
 * Serializer for Message model. Booking is referenced by UUID.
 */
export type PatchedMessageWritable = {
    booking?: string;
    message?: string;
    is_read?: boolean;
};

export type PatchedProfileWritable = {
    phone?: string;
    bio?: string;
    profile_image?: string | null;
};

export type ProfileWritable = {
    phone?: string;
    bio?: string;
    profile_image?: string | null;
};

export type AuthTokenCreateData = {
    body: AuthToken;
    path?: never;
    query?: never;
    url: '/api/auth-token/';
};

export type AuthTokenCreateResponses = {
    200: AuthToken;
};

export type AuthTokenCreateResponse = AuthTokenCreateResponses[keyof AuthTokenCreateResponses];

export type BookingsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/bookings/';
};

export type BookingsListResponses = {
    200: PaginatedBookingListList;
};

export type BookingsListResponse = BookingsListResponses[keyof BookingsListResponses];

export type BookingsCreateData = {
    body: BookingWritable;
    path?: never;
    query?: never;
    url: '/api/bookings/';
};

export type BookingsCreateResponses = {
    201: Booking;
};

export type BookingsCreateResponse = BookingsCreateResponses[keyof BookingsCreateResponses];

export type BookingsDestroyData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/bookings/{uuid}/';
};

export type BookingsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type BookingsDestroyResponse = BookingsDestroyResponses[keyof BookingsDestroyResponses];

export type BookingsRetrieveData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/bookings/{uuid}/';
};

export type BookingsRetrieveResponses = {
    200: Booking;
};

export type BookingsRetrieveResponse = BookingsRetrieveResponses[keyof BookingsRetrieveResponses];

export type BookingsPartialUpdateData = {
    body?: PatchedBookingWritable;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/bookings/{uuid}/';
};

export type BookingsPartialUpdateResponses = {
    200: Booking;
};

export type BookingsPartialUpdateResponse = BookingsPartialUpdateResponses[keyof BookingsPartialUpdateResponses];

export type BookingsUpdateData = {
    body: BookingWritable;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/bookings/{uuid}/';
};

export type BookingsUpdateResponses = {
    200: Booking;
};

export type BookingsUpdateResponse = BookingsUpdateResponses[keyof BookingsUpdateResponses];

export type ImagesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
    };
    url: '/api/images/';
};

export type ImagesListResponses = {
    200: PaginatedImageList;
};

export type ImagesListResponse = ImagesListResponses[keyof ImagesListResponses];

export type ImagesCreateData = {
    body: ImageWritable;
    path?: never;
    query?: never;
    url: '/api/images/';
};

export type ImagesCreateResponses = {
    201: Image;
};

export type ImagesCreateResponse = ImagesCreateResponses[keyof ImagesCreateResponses];

export type ImagesDestroyData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/images/{uuid}/';
};

export type ImagesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ImagesDestroyResponse = ImagesDestroyResponses[keyof ImagesDestroyResponses];

export type ImagesRetrieveData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/images/{uuid}/';
};

export type ImagesRetrieveResponses = {
    200: Image;
};

export type ImagesRetrieveResponse = ImagesRetrieveResponses[keyof ImagesRetrieveResponses];

export type ImagesPartialUpdateData = {
    body?: PatchedImageWritable;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/images/{uuid}/';
};

export type ImagesPartialUpdateResponses = {
    200: Image;
};

export type ImagesPartialUpdateResponse = ImagesPartialUpdateResponses[keyof ImagesPartialUpdateResponses];

export type ImagesUpdateData = {
    body: ImageWritable;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/images/{uuid}/';
};

export type ImagesUpdateResponses = {
    200: Image;
};

export type ImagesUpdateResponse = ImagesUpdateResponses[keyof ImagesUpdateResponses];

export type ItemsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Category of the item
         *
         * * `books` - Books
         * * `clothing` - Clothing
         * * `electronics` - Electronics
         * * `furniture` - Furniture
         * * `garden` - Garden
         * * `kitchen` - Kitchen
         * * `other` - Other
         * * `rooms` - Rooms
         * * `sports` - Sports
         * * `tools` - Tools
         * * `toys` - Toys
         * * `vehicles` - Vehicles
         */
        category?: 'books' | 'clothing' | 'electronics' | 'furniture' | 'garden' | 'kitchen' | 'other' | 'rooms' | 'sports' | 'tools' | 'toys' | 'vehicles';
        created_after?: string;
        created_before?: string;
        max_rental_price?: number;
        max_sale_price?: number;
        min_rental_price?: number;
        min_sale_price?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        published?: boolean;
        /**
         * A search term.
         */
        search?: string;
        /**
         * * `0` - Draft
         * * `1` - Processing
         * * `2` - Available
         * * `3` - Reserved
         * * `4` - Rented
         * * `5` - Sold
         */
        status?: Array<0 | 1 | 2 | 3 | 4 | 5>;
        user?: number;
    };
    url: '/api/items/';
};

export type ItemsListResponses = {
    200: PaginatedItemListList;
};

export type ItemsListResponse = ItemsListResponses[keyof ItemsListResponses];

export type ItemsCreateData = {
    body?: ItemWritable;
    path?: never;
    query?: never;
    url: '/api/items/';
};

export type ItemsCreateResponses = {
    201: Item;
};

export type ItemsCreateResponse = ItemsCreateResponses[keyof ItemsCreateResponses];

export type ItemsDestroyData = {
    body?: never;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/items/{uuid}/';
};

export type ItemsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ItemsDestroyResponse = ItemsDestroyResponses[keyof ItemsDestroyResponses];

export type ItemsRetrieveData = {
    body?: never;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/items/{uuid}/';
};

export type ItemsRetrieveResponses = {
    200: Item;
};

export type ItemsRetrieveResponse = ItemsRetrieveResponses[keyof ItemsRetrieveResponses];

export type ItemsPartialUpdateData = {
    body?: PatchedItemWritable;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/items/{uuid}/';
};

export type ItemsPartialUpdateResponses = {
    200: Item;
};

export type ItemsPartialUpdateResponse = ItemsPartialUpdateResponses[keyof ItemsPartialUpdateResponses];

export type ItemsUpdateData = {
    body?: ItemWritable;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/items/{uuid}/';
};

export type ItemsUpdateResponses = {
    200: Item;
};

export type ItemsUpdateResponse = ItemsUpdateResponses[keyof ItemsUpdateResponses];

export type ItemsAiDescribeUpdateData = {
    body?: ItemWritable;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/items/{uuid}/ai_describe/';
};

export type ItemsAiDescribeUpdateResponses = {
    200: Item;
};

export type ItemsAiDescribeUpdateResponse = ItemsAiDescribeUpdateResponses[keyof ItemsAiDescribeUpdateResponses];

export type ItemsAiImageUpdateData = {
    body?: ItemWritable;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/items/{uuid}/ai_image/';
};

export type ItemsAiImageUpdateResponses = {
    200: Item;
};

export type ItemsAiImageUpdateResponse = ItemsAiImageUpdateResponses[keyof ItemsAiImageUpdateResponses];

export type ItemsReorderImagesUpdateData = {
    body?: ItemWritable;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/items/{uuid}/reorder_images/';
};

export type ItemsReorderImagesUpdateResponses = {
    200: Item;
};

export type ItemsReorderImagesUpdateResponse = ItemsReorderImagesUpdateResponses[keyof ItemsReorderImagesUpdateResponses];

export type MessagesListData = {
    body?: never;
    path?: never;
    query?: {
        booking?: string;
        created_at_after?: string;
        created_at_before?: string;
        is_read?: boolean;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        sender?: number;
        /**
         * Unread messages received by current user
         */
        unread_received?: boolean;
    };
    url: '/api/messages/';
};

export type MessagesListResponses = {
    200: PaginatedMessageList;
};

export type MessagesListResponse = MessagesListResponses[keyof MessagesListResponses];

export type MessagesCreateData = {
    body: MessageWritable;
    path?: never;
    query?: never;
    url: '/api/messages/';
};

export type MessagesCreateResponses = {
    201: Message;
};

export type MessagesCreateResponse = MessagesCreateResponses[keyof MessagesCreateResponses];

export type MessagesDestroyData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/messages/{uuid}/';
};

export type MessagesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type MessagesDestroyResponse = MessagesDestroyResponses[keyof MessagesDestroyResponses];

export type MessagesRetrieveData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/messages/{uuid}/';
};

export type MessagesRetrieveResponses = {
    200: Message;
};

export type MessagesRetrieveResponse = MessagesRetrieveResponses[keyof MessagesRetrieveResponses];

export type MessagesPartialUpdateData = {
    body?: PatchedMessageWritable;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/messages/{uuid}/';
};

export type MessagesPartialUpdateResponses = {
    200: Message;
};

export type MessagesPartialUpdateResponse = MessagesPartialUpdateResponses[keyof MessagesPartialUpdateResponses];

export type MessagesUpdateData = {
    body: MessageWritable;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/messages/{uuid}/';
};

export type MessagesUpdateResponses = {
    200: Message;
};

export type MessagesUpdateResponse = MessagesUpdateResponses[keyof MessagesUpdateResponses];

export type ProfilesListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
    };
    url: '/api/profiles/';
};

export type ProfilesListResponses = {
    200: PaginatedProfileList;
};

export type ProfilesListResponse = ProfilesListResponses[keyof ProfilesListResponses];

export type ProfilesRetrieveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/profiles/{id}/';
};

export type ProfilesRetrieveResponses = {
    200: Profile;
};

export type ProfilesRetrieveResponse = ProfilesRetrieveResponses[keyof ProfilesRetrieveResponses];

export type ProfilesMeRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/profiles/me/';
};

export type ProfilesMeRetrieveResponses = {
    200: Profile;
};

export type ProfilesMeRetrieveResponse = ProfilesMeRetrieveResponses[keyof ProfilesMeRetrieveResponses];

export type ProfilesMePartialUpdateData = {
    body?: PatchedProfileWritable;
    path?: never;
    query?: never;
    url: '/api/profiles/me/';
};

export type ProfilesMePartialUpdateResponses = {
    200: Profile;
};

export type ProfilesMePartialUpdateResponse = ProfilesMePartialUpdateResponses[keyof ProfilesMePartialUpdateResponses];

export type PublicBookingsListData = {
    body?: never;
    path?: never;
    query?: {
        created_at_after?: string;
        created_at_before?: string;
        item?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * * `1` - Pending
         * * `2` - Cancelled
         * * `3` - Confirmed
         * * `4` - Completed
         * * `5` - Rejected
         */
        status?: Array<1 | 2 | 3 | 4 | 5>;
        user?: number;
    };
    url: '/api/public-bookings/';
};

export type PublicBookingsListResponses = {
    200: PaginatedBookingListList;
};

export type PublicBookingsListResponse = PublicBookingsListResponses[keyof PublicBookingsListResponses];

export type PublicBookingsRetrieveData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/public-bookings/{uuid}/';
};

export type PublicBookingsRetrieveResponses = {
    200: Booking;
};

export type PublicBookingsRetrieveResponse = PublicBookingsRetrieveResponses[keyof PublicBookingsRetrieveResponses];

export type PublicItemsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Category of the item
         *
         * * `books` - Books
         * * `clothing` - Clothing
         * * `electronics` - Electronics
         * * `furniture` - Furniture
         * * `garden` - Garden
         * * `kitchen` - Kitchen
         * * `other` - Other
         * * `rooms` - Rooms
         * * `sports` - Sports
         * * `tools` - Tools
         * * `toys` - Toys
         * * `vehicles` - Vehicles
         */
        category?: 'books' | 'clothing' | 'electronics' | 'furniture' | 'garden' | 'kitchen' | 'other' | 'rooms' | 'sports' | 'tools' | 'toys' | 'vehicles';
        created_after?: string;
        created_before?: string;
        max_rental_price?: number;
        max_sale_price?: number;
        min_rental_price?: number;
        min_sale_price?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        published?: boolean;
        /**
         * A search term.
         */
        search?: string;
        /**
         * * `0` - Draft
         * * `1` - Processing
         * * `2` - Available
         * * `3` - Reserved
         * * `4` - Rented
         * * `5` - Sold
         */
        status?: Array<0 | 1 | 2 | 3 | 4 | 5>;
        user?: number;
    };
    url: '/api/public-items/';
};

export type PublicItemsListResponses = {
    200: PaginatedItemListList;
};

export type PublicItemsListResponse = PublicItemsListResponses[keyof PublicItemsListResponses];

export type PublicItemsRetrieveData = {
    body?: never;
    path: {
        /**
         * Unique identifier for the item
         */
        uuid: string;
    };
    query?: never;
    url: '/api/public-items/{uuid}/';
};

export type PublicItemsRetrieveResponses = {
    200: Item;
};

export type PublicItemsRetrieveResponse = PublicItemsRetrieveResponses[keyof PublicItemsRetrieveResponses];

export type SchemaRetrieveData = {
    body?: never;
    path?: never;
    query?: {
        format?: 'json' | 'yaml';
        lang?: 'de' | 'en';
    };
    url: '/api/schema/';
};

export type SchemaRetrieveResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type SchemaRetrieveResponse = SchemaRetrieveResponses[keyof SchemaRetrieveResponses];

export type UsersListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
    };
    url: '/api/users/';
};

export type UsersListResponses = {
    200: PaginatedUserList;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersRetrieveData = {
    body?: never;
    path: {
        /**
         * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
         */
        username: string;
    };
    query?: never;
    url: '/api/users/{username}/';
};

export type UsersRetrieveResponses = {
    200: User;
};

export type UsersRetrieveResponse = UsersRetrieveResponses[keyof UsersRetrieveResponses];

export type UsersPartialUpdateData = {
    body?: PatchedUser;
    path: {
        /**
         * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
         */
        username: string;
    };
    query?: never;
    url: '/api/users/{username}/';
};

export type UsersPartialUpdateResponses = {
    200: User;
};

export type UsersPartialUpdateResponse = UsersPartialUpdateResponses[keyof UsersPartialUpdateResponses];

export type UsersUpdateData = {
    body: User;
    path: {
        /**
         * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
         */
        username: string;
    };
    query?: never;
    url: '/api/users/{username}/';
};

export type UsersUpdateResponses = {
    200: User;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];

export type UsersMeRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me/';
};

export type UsersMeRetrieveResponses = {
    200: User;
};

export type UsersMeRetrieveResponse = UsersMeRetrieveResponses[keyof UsersMeRetrieveResponses];
