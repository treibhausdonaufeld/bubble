name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  pull_request:
    branches: ['master', 'main']
    paths-ignore: ['docs/**']

  push:
    branches: ['master', 'main']
    paths-ignore: ['docs/**']

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  linter:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'
      # Consider using pre-commit.ci for open source project
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  # With no caching at all the entire ci process takes 3m to complete!
  pytest:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache local backend
        uses: docker/bake-action@v6
        with:
          push: false
          load: true
          files: docker-compose.local.yml
          targets: django
          set: |
            django.cache-from=type=gha,scope=django-cached-tests
            django.cache-to=type=gha,scope=django-cached-tests,mode=max
            postgres.cache-from=type=gha,scope=postgres-cached-tests
            postgres.cache-to=type=gha,scope=postgres-cached-tests,mode=max

      # - name: Build and cache docs
      #   uses: docker/bake-action@v6
      #   with:
      #     push: false
      #     load: true
      #     files: docker-compose.docs.yml
      #     set: |
      #       docs.cache-from=type=gha,scope=cached-docs
      #       docs.cache-to=type=gha,scope=cached-docs,mode=max

      - name: Check DB Migrations
        run: docker compose -f docker-compose.local.yml run --rm django python manage.py makemigrations --check

      - name: Run DB Migrations
        run: docker compose -f docker-compose.local.yml run --rm django python manage.py migrate

      - name: Run Django Tests
        run: docker compose -f docker-compose.local.yml run django pytest

      - name: Tear down the Stack
        run: docker compose -f docker-compose.local.yml down

  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.extract_branch.outputs.branch }},enable=true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Django image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./compose/production/django/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Output image information
      run: |
        echo "Built and pushed images:"
        echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
          echo "  - $tag"
        done
        echo ""
        echo "Image can be pulled with:"
        echo "  docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.branch }}"
