name: Cleanup Old Images

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      days_to_keep:
        description: 'Number of days to keep images'
        required: false
        default: '7'
        type: string

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old images
        uses: actions/github-script@v7
        with:
          script: |
            const daysToKeep = parseInt(
              (context.payload?.inputs?.days_to_keep) ||
              '${{ github.event.inputs.days_to_keep }}' ||
              '7'
            );
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

            const owner = context.repo.owner;
            const packageName = context.repo.repo;

            try {
              // Get all package versions
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: packageName,
                org: owner,
                per_page: 100
              });

              console.log(`Found ${versions.length} package versions`);

              for (const version of versions) {
                const versionDate = new Date(version.created_at);
                const tags = version.metadata?.container?.tags || [];

                // Skip main/master/latest tags
                const isProtectedTag = tags.some(tag =>
                  ['latest', 'main', 'master'].includes(tag) ||
                  tag.startsWith('v')
                );

                if (isProtectedTag) {
                  console.log(`Skipping protected version with tags: ${tags.join(', ')}`);
                  continue;
                }

                // Delete old feature branch images
                if (versionDate < cutoffDate && tags.length > 0) {
                  console.log(`Deleting old version with tags: ${tags.join(', ')} (created: ${versionDate})`);
                  try {
                    await github.rest.packages.deletePackageVersionForOrg({
                      package_type: 'container',
                      package_name: packageName,
                      org: owner,
                      package_version_id: version.id
                    });
                    console.log(`Successfully deleted version ${version.id}`);
                  } catch (error) {
                    console.error(`Failed to delete version ${version.id}:`, error);
                  }
                }
              }
            } catch (error) {
              console.error('Error during cleanup:', error);
              // Try user-owned packages if org-owned fails
              try {
                const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                  package_type: 'container',
                  package_name: packageName,
                  username: owner,
                  per_page: 100
                });

                console.log(`Found ${versions.length} user package versions`);

                for (const version of versions) {
                  const versionDate = new Date(version.created_at);
                  const tags = version.metadata?.container?.tags || [];

                  const isProtectedTag = tags.some(tag =>
                    ['latest', 'main', 'master'].includes(tag) ||
                    tag.startsWith('v')
                  );

                  if (isProtectedTag) {
                    console.log(`Skipping protected version with tags: ${tags.join(', ')}`);
                    continue;
                  }

                  if (versionDate < cutoffDate && tags.length > 0) {
                    console.log(`Deleting old version with tags: ${tags.join(', ')} (created: ${versionDate})`);
                    try {
                      await github.rest.packages.deletePackageVersionForUser({
                        package_type: 'container',
                        package_name: packageName,
                        username: owner,
                        package_version_id: version.id
                      });
                      console.log(`Successfully deleted version ${version.id}`);
                    } catch (error) {
                      console.error(`Failed to delete version ${version.id}:`, error);
                    }
                  }
                }
              } catch (userError) {
                console.error('Error accessing user packages:', userError);
              }
            }
