# Generated by Django 5.2.6 on 2025-09-20 12:41

import django.db.models.deletion
import pgvector.django.vector
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('books', '0001_enable_pgvector'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('bio', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('parent_genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subgenres', to='books.genre')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('title', models.CharField(help_text='Book title', max_length=500)),
                ('year', models.PositiveIntegerField(blank=True, help_text='Publication year', null=True)),
                ('topic', models.CharField(blank=True, help_text='Main topic or subject', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Book description')),
                ('image', models.ImageField(blank=True, help_text='Book cover image', null=True, upload_to='books/covers/')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the book', unique=True)),
                ('internal', models.BooleanField(default=False, help_text='Internal book, not for public display')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('embedding', pgvector.django.vector.VectorField(blank=True, dimensions=384, help_text='Vector embedding for semantic search', null=True)),
                ('authors', models.ManyToManyField(help_text='Book authors', related_name='books', to='books.author')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to=settings.AUTH_USER_MODEL)),
                ('genres', models.ManyToManyField(blank=True, help_text='Book genres', related_name='books', to='books.genre')),
                ('location', models.ForeignKey(blank=True, help_text='Book location', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='books.location')),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'ordering': ['-date_created'],
            },
        ),
    ]
