volumes:
  bubble_local_postgres_data: {}
  bubble_local_postgres_data_backups: {}
  bubble_local_redis_data: {}
  bubble_local_temporal_data: {}

services:
  frontend:
    image: bubble-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
    ports:
      - '3000:8888'

  django: &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: bubble_local_django
    depends_on:
      - postgres
      - redis
      - mailpit
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    ports:
      - '8000:8000'
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: bubble_production_postgres
    restart: always
    volumes:
      - bubble_local_postgres_data:/var/lib/postgresql/data
      - bubble_local_postgres_data_backups:/backups
    ports:
      - '8001:5432'
    env_file:
      - ./.envs/.local/.postgres

  mailpit:
    image: docker.io/axllent/mailpit:latest
    ports:
      - '8025:8025'

  redis:
    image: ghcr.io/dragonflydb/dragonfly:latest
    restart: always
    ports:
      - '127.0.0.1:6377:6379'
    environment:
      # required to work with django-channels
      # https://github.com/dragonflydb/dragonfly/issues/182#issuecomment-1241624150
      DFLY_default_lua_flags: 'allow-undeclared-keys disable-atomicity'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  # celeryworker:
  #   <<: *django
  #   image: bubble_local_celeryworker
  #   depends_on:
  #     - redis
  #     - postgres
  #     - mailpit
  #   ports: []
  #   command: /start-celeryworker

  # celerybeat:
  #   <<: *django
  #   image: bubble_local_celerybeat
  #   depends_on:
  #     - redis
  #     - postgres
  #     - mailpit
  #   ports: []
  #   command: /start-celerybeat

  # flower:
  #   <<: *django
  #   image: bubble_local_flower
  #   ports:
  #     - '5555:5555'
  #   command: /start-flower

  # Temporal.io services
  # temporal-postgresql:
  #   image: postgres:16
  #   environment:
  #     POSTGRES_PASSWORD: temporal
  #     POSTGRES_USER: temporal
  #     POSTGRES_DB: temporal
  #   volumes:
  #     - bubble_local_temporal_data:/var/lib/postgresql/data
  #   restart: always

  # temporal:
  #   image: temporalio/auto-setup:latest
  #   depends_on:
  #     - temporal-postgresql
  #   environment:
  #     - DB=postgres12
  #     - DB_PORT=5432
  #     - POSTGRES_USER=temporal
  #     - POSTGRES_PWD=temporal
  #     - POSTGRES_SEEDS=temporal-postgresql
  #     - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
  #     - TEMPORAL_ADDRESS=temporal:7233
  #     - TEMPORAL_CLI_ADDRESS=temporal:7233
  #   ports:
  #     - '127.0.0.1:7233:7233'
  #   volumes:
  #     - ./compose/local/temporal:/etc/temporal/config/dynamicconfig
  #   restart: always

  # temporal-admin-tools:
  #   image: temporalio/admin-tools:latest
  #   depends_on:
  #     - temporal
  #   environment:
  #     - TEMPORAL_CLI_ADDRESS=temporal:7233
  #   stdin_open: true
  #   tty: true

  # temporal-ui:
  #   image: temporalio/ui:latest
  #   depends_on:
  #     - temporal
  #   environment:
  #     - TEMPORAL_ADDRESS=temporal:7233
  #     - TEMPORAL_CORS_ORIGINS=http://localhost:3000,http://django:8000
  #   ports:
  #     - '127.0.0.1:8080:8080'

  # node:
  #   build:
  #     context: .
  #     dockerfile: ./compose/local/node/Dockerfile
  #   image: bubble_local_node
  #   depends_on:
  #     - django
  #   environment:
  #     - BACKEND_URL=http://django:8000
  #   volumes:
  #     - .:/app:z
  #     # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
  #     - /app/node_modules
  #   command: npm run dev
  #   ports:
  #     - '3000:3000'

  # temporal-worker:
  #   <<: *django
  #   depends_on:
  #     - temporal
  #     - postgres
  #     - redis
  #   ports: []
  #   command: ./temporal_worker.py
